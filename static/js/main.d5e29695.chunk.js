(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{177:function(e,t,n){},179:function(e,t,n){"use strict";n.r(t);var r=n(10),a=n.n(r),o=n(19),i=n(4),s=n(8),c=n(6),l=n(3),d=n(5),u=n(15),h=n(0),m=n.n(h),p=n(44),f=n.n(p),v=n(29),g=n.n(v),y="#202124",w="#202124",k="#393e42",b="#ff5a72",x=.25,z=.15,E=20,S=4;function B(e){return(E+S)*e+S}function j(e){return(E+S)*(9-e)+S}function A(e){var t="left"===e.direction||"right"===e.direction?S:0;return E+t+"px"}function N(e){var t="up"===e.direction||"down"===e.direction?S:0;return E+t+"px"}function T(e){var t="left"===e.direction?-S:0;return B(e.x)+t}function O(e){var t="down"===e.direction?-S:0;return j(e.y)+t}function C(e,t){return t?e._id===t?1:x:e.isDead?z:1}function _(e){for(var t=[],n=0;n<e;n++)t.push(n);return t}var I=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"renderPart",value:function(e,t,n,r,a){switch(n.type){case"head":return this.renderHeadPart(e,t,n,a);case"tail":return this.renderTailPart(e,t,n,a);default:return this.renderMiddlePart(e,t,n,r,a)}}},{key:"renderHeadPart",value:function(e,t,n,r){var a=function(e){switch(e.direction){case"left":case"right":default:return B(e.x)}}(n),o=function(e){switch(e.direction){case"up":case"down":default:return j(e.y)}}(n),i=e.headSvg.viewBox.baseVal,s=function(e,t){var n=t.width/2,r=t.height/2;switch(e){case"left":return"rotate(180 ".concat(n," ").concat(r,")");case"up":return"rotate(90 ".concat(n," ").concat(r,")");case"down":return"rotate(-90 ".concat(n," ").concat(r,")");default:return""}}(n.direction,i),c="".concat(i.x," ").concat(i.y," ").concat(i.width," ").concat(i.height);return m.a.createElement("svg",{key:"part"+t+",head",fill:e.color,width:E+"px",height:E+"px",x:a,y:o,viewBox:c,opacity:C(e,r),shapeRendering:"optimizeSpeed"},m.a.createElement("g",{transform:s,dangerouslySetInnerHTML:{__html:e.headSvg.innerHTML}}))}},{key:"renderMiddlePart",value:function(e,t,n,r,a){return n.shouldRender?m.a.createElement("rect",{key:"part".concat(t,",").concat(n.x,",").concat(n.y),x:T(n),y:O(n),width:A(n),height:N(n),opacity:C(e,a),fill:e.color,shapeRendering:"optimizeSpeed"}):m.a.createElement("svg",{key:"part"+t+","+r,shapeRendering:"optimizeSpeed"})}},{key:"renderTailPart",value:function(e,t,n,r){var a=function(e){switch(e.direction){case"left":return B(e.x)-S;case"right":return B(e.x)+S;default:return B(e.x)}}(n),o=function(e){switch(e.direction){case"up":return j(e.y)+S;case"down":return j(e.y)-S;default:return j(e.y)}}(n),i=e.tailSvg.viewBox.baseVal,s=function(e,t){var n=t.width/2,r=t.height/2;switch(e){case"right":return"rotate(180 ".concat(n," ").concat(r,")");case"down":return"rotate(90 ".concat(n," ").concat(r,")");case"up":return"rotate(-90 ".concat(n," ").concat(r,")");default:return""}}(n.direction,i),c="".concat(i.x," ").concat(i.y," ").concat(i.width," ").concat(i.height);return n.shouldRender?m.a.createElement("svg",{key:"part"+t+",tail",fill:e.color,width:E,height:E,x:a,y:o,viewBox:c,opacity:C(e,r),shapeRendering:"optimizeSpeed"},m.a.createElement("g",{transform:s,dangerouslySetInnerHTML:{__html:e.tailSvg.innerHTML}})):m.a.createElement("svg",{key:"part"+t+",tail",shapeRendering:"optimizeSpeed"})}},{key:"renderGrid",value:function(){var e=this,t=this.props.snakes||[],n=this.props.food||[],r=t.concat().sort(function(e,t){return(e.isDead?0:1)-(t.isDead?0:1)}),a=B(this.props.columns),o=B(this.props.rows);return m.a.createElement("svg",{width:this.props.maxWidth,height:this.props.maxHeight,x:this.props.x,y:this.props.y,viewBox:"0 0 ".concat(a," ").concat(o)},m.a.createElement("rect",{width:a,height:o,fill:w,opacity:this.props.highlightedSnake?x:null,shapeRendering:"optimizeSpeed"}),_(this.props.rows).map(function(t,n){return _(e.props.columns).map(function(t,r){return m.a.createElement("rect",{key:"cell"+n+","+r,x:B(r),y:B(n),width:E,height:E,fill:k,opacity:e.props.highlightedSnake?x:null,shapeRendering:"optimizeSpeed"})})}),r.map(function(t,n){return t.body.map(function(r,a){return e.renderPart(t,n,r,a,e.props.highlightedSnake)})}),n.map(function(t,n){return m.a.createElement("circle",{key:"food"+n,cx:B(t.x)+E/2,cy:j(t.y)+E/2,r:E/2,fill:b,opacity:e.props.highlightedSnake?x:null,shapeRendering:"optimizeQuality"})}))}},{key:"render",value:function(){return this.props.snakes?this.renderGrid():void 0}}]),t}(m.a.Component),L=H('\n<svg id="root" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n    <circle fill="none" cx="12.52" cy="28.55" r="9.26"/>\n    <path d="M0 100h100L56 55.39l44-39.89V.11L0 0zm12.52-80.71a9.26 9.26 0 1 1-9.26 9.26 9.26 9.26 0 0 1 9.26-9.26z"/>\n</svg>\n'),q=H('\n<svg id="root" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n    <path d="M50 0H0v100h50l50-50L50 0z"/>\n</svg>\n');function H(e){var t=document.createElement("div");return t.innerHTML=e.trim(),t.firstChild}var R="100%",M="85%",P=function(e){function t(){return Object(i.a)(this,t),Object(c.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(s.a)(t,[{key:"render",value:function(){var e=this.props.snakes.map(function(e){return e.headSvg=L,e.tailSvg=q,e});return m.a.createElement("svg",{style:{display:"block",margin:"auto"},viewBox:"0 0 90 90",height:M,width:R},m.a.createElement("rect",{x:"0",y:"0",width:"90",height:"90",fill:y}),m.a.createElement(I,{snakes:e,food:this.props.food,columns:this.props.columns,rows:this.props.rows,maxWidth:90,maxHeight:90,x:0,y:0}))}}]),t}(m.a.Component),W=n(20);function J(e){return{turn:e.turn,game:{width:e.board.width,height:e.board.height},snake:{_id:e.you.id,color:e.you.color,name:e.you.name,health:e.you.health,isDead:!!e.you.death,death:e.you.death,body:e.you.body.map(function(t,n){return function(e,t){var n=e.body[t],r=e.body[t-1];return Object(W.a)({},n,{direction:r?G(n,r):D(e),shouldRender:!V(e,t),type:F(e,t)})}(e.you,n)})},food:e.board.food}}function G(e,t){return e.x<t.x?"right":t.x<e.x?"left":e.y<t.y?"down":"up"}function D(e){return e.body.length>1?G(e.body[1],e.body[0]):"up"}function V(e,t){var n=e.body[t],r=e.body[t-1];return r&&r.x===n.x&&r.y===n.y}function F(e,t){return 0===t?"head":t===e.body.length-1?"tail":"body"}var Y=n(46),U={turn:1,width:10,height:10,food:[{x:3,y:2},{x:1,y:7},{x:7,y:8},{x:8,y:1}],snake:{id:"test",name:"test",health:25,color:"grey",body:[{x:5,y:6},{x:5,y:5}]}};function Q(e,t,n){return K.apply(this,arguments)}function K(){return(K=Object(o.a)(a.a.mark(function e(t,n,r){var o,i,s,c,l,d;return a.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:a=U,(o=JSON.parse(JSON.stringify(a))).snake.color=t.start({}).color,i=1,s=o;case 4:if(!n.cancelled()){e.next=7;break}return e.abrupt("return");case 7:return s=Object(W.a)({},s,{turn:i}),c=t.move(te(s)).move,l=$(s,c),-1!=(d=X(l,s.food))?s.food.splice(d,1):s.snake.body.splice(s.snake.body.length-1,1),s.snake.body.unshift(l),r(J(te(s))),e.next=16,ee(400);case 16:i++,e.next=4;break;case 19:case"end":return e.stop()}var a},e,this)}))).apply(this,arguments)}function X(e,t){return t.findIndex(function(t){return t.x===e.x&&t.y===e.y})}var Z=function(e){function t(e,n){var r;return Object(i.a)(this,t),(r=Object(c.a)(this,Object(l.a)(t).call(this,e))).turn=void 0,r.turn=n,r}return Object(d.a)(t,e),t}(Object(Y.a)(Error));function $(e,t){var n=e.snake,r=e.turn,a=e.height,o=e.width,i=function(){throw new Z("Snake moved off the board!",r)},s=Object.assign({},n.body[0]);switch(t){case"up":s.y+=1,s.y>=a&&i();break;case"down":s.y-=1,s.y<0&&i();break;case"left":s.x-=1,s.x<0&&i();break;case"right":s.x+=1,s.x>=o&&i();break;default:throw new Z('Unkown move "'.concat(t,'"'),r)}return n.body.forEach(function(e){if(e.x===s.x&&e.y===s.y)throw new Z("Snake moved into itself!",r)}),s}function ee(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return new Promise(function(t){return setTimeout(t,e)})}function te(e){return{game:{id:"test"},turn:e.turn,board:{height:e.height,width:e.width,food:e.food,snakes:[e.snake]},you:e.snake}}var ne=J(te(U));var re=n(45),ae=n.n(re),oe=n(30),ie=n.n(oe),se=n(31);function ce(e){var t=new ie.a;t.file("README.md",'# A simple [Battlesnake](http://play.battlesnake.com) written in Javascript for NodeJS\r\n\r\nThis is a basic implementation of the [Battlesnake API](https://docs.battlesnake.com/snake-api). It\'s a great starting point for anyone wanting to program their first Battlesnake using Javascript. It comes ready to deploy to [AWS Lambda](https://aws.amazon.com/lambda/).\r\n\r\n### Technologies\r\n\r\nThis Battlesnake uses [Javascript](https://www.javascript.com/), [NodeJS](https://nodejs.dev/), and [AWS Lambda](https://aws.amazon.com/lambda/). You will also need [npm](https://docs.npmjs.com/getting-started/) to assist with Javascript dependency management.\r\n\r\n### Prerequisites\r\n\r\n* [GitHub Account](https://github.com/) and [Git Command Line](https://www.atlassian.com/git/tutorials/install-git)\r\n* [AWS Account](https://aws.amazon.com/)\r\n* [Battlesnake Account](https://play.battlesnake.com)\r\n\r\n### Deploying\r\n\r\nBefore starting ensure that you have access to your AWS account. You can run the\r\nbelow command to make sure that you credentials are configured:\r\n\r\n    aws sts get-caller-identity\r\n\r\nInstall the following command line tools before getting started:\r\n\r\n1. Install the [AWS CLI](https://aws.amazon.com/cli/).\r\n1. Install the [AWS SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started.html).\r\n\r\nNow to deploy your code, we\'ll simply invoke the `sam` cli tool:\r\n\r\n    sam deploy --stack-name Battlesnake --guided\r\n\r\nYour code is now deployed! To find the endpoint where your snake exists run the\r\nbelow command to inspect your cloudformation stack:\r\n\r\n    aws cloudformation describe-stack-resources --stack-name Battlesnake\r\n\r\nThe resource id of your api gateway is what we need to find to build the url for\r\nyour snake. The resource will look similar to this:\r\n\r\n```json\r\n{\r\n    "StackName": "Battlesnake",\r\n    "StackId": "arn:aws:cloudformation:us-west-2:414904551680:stack/Battlesnake/909d56f0-76ff-11ea-a413-02eb596faf62",\r\n    "LogicalResourceId": "ServerlessRestApi",\r\n    "PhysicalResourceId": "dmgqc630fe",\r\n    "ResourceType": "AWS::ApiGateway::RestApi",\r\n    ...\r\n},\r\n```\r\n\r\nOnce you\'ve found the ID of your Api Gateway you can reach your snake at the\r\nfollowing endpoint:\r\n\r\n    https://<id>.execute-api.us-west-2.amazonaws.com/Prod/move\r\n\r\nCongratulations! You\'ve deployed a snake to AWS Lambda.\r\n'),t.file("template.yml","AWSTemplateFormatVersion: '2010-09-09'\r\nTransform: 'AWS::Serverless-2016-10-31'\r\nDescription: Battlesnake serverless snake\r\nResources:\r\n  Function:\r\n    Type: 'AWS::Serverless::Function'\r\n    Properties:\r\n      Handler: index.handler\r\n      Runtime: nodejs12.x\r\n      CodeUri: .\r\n      Description: Battlesnake serverless snake\r\n      MemorySize: 512\r\n      Timeout: 10\r\n      Policies: []\r\n      Events:\r\n        Api:\r\n          Type: Api\r\n          Properties:\r\n            Path: '{proxy+}'\r\n            Method: ANY\r\n"),t.file("samconfig.toml",'version = 0.1\r\n[default]\r\n[default.deploy]\r\n[default.deploy.parameters]\r\nstack_name = "Battlesnake"\r\ns3_prefix = "Battlesnake"\r\nregion = "us-west-2"\r\nconfirm_changeset = true\r\ncapabilities = "CAPABILITY_IAM"\r\n\r\n'),t.file("index.js",e+'\n\r\nfunction call(event) {\r\n  let incoming = event.body;\r\n  if (event.isBase64Encoded) {\r\n    incoming = Buffer.from(incoming, "base64").toString("utf-8");\r\n  }\r\n  const req = JSON.parse(incoming);\r\n  console.log("Request", req);\r\n  switch (event.path) {\r\n    case "/move":\r\n      return { statusCode: 200, body: move(req) };\r\n    case "/start":\r\n      return { statusCode: 200, body: start(req) };\r\n    default:\r\n      return { statusCode: 404, body: { code: "NotFound" } };\r\n  }\r\n}\r\n\r\nfunction respond(resp) {\r\n  return {\r\n    statusCode: resp.statusCode,\r\n    isBase64Encoded: false,\r\n    body: JSON.stringify(resp.body),\r\n    headers: {\r\n      \'content-type\': \'application/json\',\r\n    }\r\n  };\r\n}\r\n\r\nexports.handler = async (event, context) => {\r\n  try {\r\n    const resp = respond(call(event));\r\n    console.log("Response", resp);\r\n    return resp;\r\n  } catch (error) {\r\n    console.error("Error", error);\r\n    return respond({\r\n      statusCode: 500,\r\n      body: error.message,\r\n    });\r\n  }\r\n};\r\n'),t.generateAsync({type:"blob"}).then(function(e){Object(se.saveAs)(e,"lambda.zip")})}function le(e){var t=new ie.a;t.file("README.md","# A simple [Battlesnake](http://play.battlesnake.com) written in Javascript for NodeJS\r\n\r\nThis is a basic implementation of the [Battlesnake API](https://docs.battlesnake.com/snake-api). It's a great starting point for anyone wanting to program their first Battlesnake using Javascript. It comes ready to deploy to [Heroku](https://heroku.com/).\r\n\r\n### Technologies\r\n\r\nThis Battlesnake uses [Javascript](https://www.javascript.com/), [NodeJS](https://nodejs.dev/), and [Heroku](https://heroku.com/). You will also need [npm](https://docs.npmjs.com/getting-started/) to assist with Javascript dependency management.\r\n\r\n### Prerequisites\r\n\r\n* [GitHub Account](https://github.com/) and [Git Command Line](https://www.atlassian.com/git/tutorials/install-git)\r\n* [Heroku Account](https://signup.heroku.com/) and [Heroku Command Line](https://devcenter.heroku.com/categories/command-line)\r\n* [Battlesnake Account](https://play.battlesnake.com)\r\n\r\n### Deploying\r\n\r\n[Create a new Heroku app](https://devcenter.heroku.com/articles/creating-apps) to run your Battlesnake.\r\n\r\n    heroku create [YOUR-APP-NAME]\r\n\r\n[Deploy your Battlesnake code to Heroku](https://devcenter.heroku.com/articles/git#deploying-code).\r\n\r\n    git push heroku master\r\n\r\nOpen your new Heroku app in your browser.\r\n\r\n    heroku open\r\n\r\nThat's it! Now ensure that you update your snake url in your battlesnake account.\r\n"),t.file("package.json",'{\r\n  "name": "battlesnake-node",\r\n  "description": "A simple BattleSnake AI written in Javascript for NodeJS",\r\n  "version": "0.0.0",\r\n  "private": true,\r\n  "dependencies": {\r\n    "express": "^4.16.4",\r\n    "body-parser": "^1.18.3"\r\n  }\r\n}\r\n'),t.file("index.js",e+'\n\r\nconst express = require(\'express\')\r\nconst bodyParser = require(\'body-parser\')\r\nconst app = express()\r\n\r\n// For deployment to Heroku, the port needs to be set using ENV, so\r\n// we check for the port number in process.env\r\napp.set(\'port\', (process.env.PORT || 9001))\r\napp.enable(\'verbose errors\')\r\napp.use(bodyParser.json())\r\n\r\napp.post("/start", (req, res) => {\r\n  console.log("Received start", req.body)\r\n  res.json(start(req.body))\r\n})\r\n\r\napp.post("/move", (req, res) => {\r\n  console.log("Received move", req.body)\r\n  res.json(move(req.body))\r\n})\r\n\r\napp.post("/ping", (req, res) => {\r\n  console.log("Received ping", req.body)\r\n})\r\n\r\napp.post("/end", (req, res) => {\r\n  console.log("Received end", req.body)\r\n})\r\n\r\napp.listen(app.get(\'port\'), () => {\r\n  console.log(\'Server listening on port %s\', app.get(\'port\'))\r\n})\r\n'),t.generateAsync({type:"blob"}).then(function(e){Object(se.saveAs)(e,"heroku.zip")})}ce.title="AWS Lambda",le.title="Heroku";var de=[ce,le];function ue(e){var t=e.next,n=e.prev,r=e.title;return m.a.createElement("header",{className:"border-bottom d-flex p-3"},m.a.createElement("div",{className:"flex-auto f2-light border-none"},r),m.a.createElement("div",{className:"BtnGroup"},m.a.createElement("button",{disabled:!n,className:"btn btn-outline BtnGroup-item",onClick:n},"< Back"),m.a.createElement("button",{className:"btn btn-outline BtnGroup-item",disabled:!t,onClick:t},"Next >")))}function he(e){return m.a.createElement("div",{className:"markdown-body overflow-scroll p-3 flex-auto height-page2"},m.a.createElement(ae.a,{source:e.src}),e.children)}var me=[function(e){return m.a.createElement(m.a.Fragment,null,m.a.createElement(ue,Object.assign({},e,{title:"Welcome to Battlesnake!"})),m.a.createElement(he,{src:"[Battlesnake](https://battlesnake.com) is a programming competition where\r\ncompetitors build snakes using code and battle them against other competitors.\r\nThis tutorial will help you build a snake and get it deployed so you can get\r\nstarted in minutes with Battlesnake.\r\n\r\nThis tutorial is perfect for beginner programmers who want to get started\r\nquickly with a new project to practice your skills.\r\n\r\nClick next to get started.\r\n"}))},function(e){return m.a.createElement(m.a.Fragment,null,m.a.createElement(ue,Object.assign({},e,{title:"Battlesnake Basics"})),m.a.createElement(he,{src:'Foundational knowledge of Javascript and Node.js isn\'t covered in this guide,\r\nbut feel free to follow along to get a taste for how to start thinking like a\r\nBattlesnake developer!\r\n\r\n#### What is Battlesnake?\r\n\r\nA Battlesnake is a programmed web server that implements the Battlesnake API to\r\nplay the game snake against other Battlesnakes. When a game is running, the\r\nBattlesnake Game Engine will make HTTP requests to your server, sending you game\r\ninformation and asking for your next move.\r\n\r\nThe main endpoint is the `/move` endpoint, the Battlesnake engine will ask for\r\nyour move out of the set of (up, down, left or right).\r\n\r\n#### Basics of\xa0grid\r\n\r\nThe game Snake is played out over a grid which looks roughly like this:\r\n\r\n```\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|0,7|   |   |   |   |   |7,7|\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|   |   |   |   |   |   |   |\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|   |   |   |   |   |   |   |\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|   |   |   |   |   |   |   |\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|   |   |   |   |   |   |   |\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|   |   |   |   |   |   |   |\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n|0,0|   |   |   |   |   |7,0|\r\n-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a-\u200a- -\r\n```\r\n\r\nThe size of the grid is determined at the start of the game. We express the\r\ncoordinates of a specific point on this grid in (x, y) format. Note that the y\r\naxis 0 is at the bottom of the board.\r\n\r\n#### Using this guide\r\n\r\nThis guide is implemented with a browser based version of the engine. You won\'t\r\nbe able to play with other snakes until you deploy the server to production but\r\nyou will be able to learn quickly and get ramped up on the basic concepts. Add\r\nthe below code to the code panel to your right and reset the game board.\r\n\r\n```javascript\r\nfunction move() {\r\n  return { move: "up" };\r\n}\r\nfunction start() {\r\n  return { color: "green" };\r\n}\r\n```\r\n\r\nWatch your snake go up and hit the top of the wall. You\'re ready to move onto\r\nthe next step!\r\n'}))},function(e){return m.a.createElement(m.a.Fragment,null,m.a.createElement(ue,Object.assign({},e,{title:"Moving your Snake"})),m.a.createElement(he,{src:'In our first version of our snake we started with a function that returns a\r\nstatic direction. This causes our snake to go to the right side of the board\r\nuntil it runs into the wall. Let\'s inspect what that \'state\' parameter looks\r\nlike that gives us control over our snake.\r\n\r\nAdd the `console.log` to the `move` functiona and restart the game and open the\r\nbrowser console. With the game running you will be able to inspect the state\r\npassed to your function.\r\n\r\n```javascript\r\nfunction move(state) {\r\n  console.log(state)\r\n  return { move: "up" };\r\n}\r\n```\r\n\r\nThe state parameter should look similar to this state value below. This is\r\neverything that we need to inspect the status of our snake and take action to\r\navoid walls, eat food or try and eat other snakes.\r\n\r\n```javascript\r\n{\r\n  "game": {\r\n    "id": "game-id-string"\r\n  },\r\n  "turn": 1,\r\n  "board": {\r\n    "height": 11,\r\n    "width": 11,\r\n    "food": [{\r\n      "x": 1,\r\n      "y": 3\r\n    }],\r\n    "snakes": [{\r\n      "id": "snake-id-string",\r\n      "name": "Sneky Snek",\r\n      "health": 100,\r\n      "body": [{\r\n        "x": 1,\r\n        "y": 3\r\n      }]\r\n    }]\r\n  },\r\n  "you": {\r\n    "id": "snake-id-string",\r\n    "name": "Sneky Snek",\r\n    "health": 100,\r\n    "body": [{\r\n      "x": 1,\r\n      "y": 3\r\n    }]\r\n  }\r\n}\r\n```\r\n'}))},function(e){return m.a.createElement(m.a.Fragment,null,m.a.createElement(ue,Object.assign({},e,{title:"Avoiding Walls"})),m.a.createElement(he,{src:"Over the next few steps we are going to build logic to avoid hitting a wall.\r\nWhat we'll replicate in code is essentially 2 steps:\r\n\r\n1. Inspect the directions that we can move our head.\r\n1. Check if any potential directions are off of the board\r\n\r\n### 1 Find our\xa0head\r\n\r\nLet's first find our head in the move function let's get the first element of\r\nour body\u200a-\u200athat's our head!\r\n\r\n```javascript\r\nfunction move(state) {\r\n  const head = state.you.body[0];\r\n  ...\r\n}\r\n```\r\n\r\nThe next step that we want to take on is examining all of the directions that we\r\ncan take. On the snake grid we know there are the four directions that we can\r\nmove. The key to detecting whether a move will put us off the board is figuring\r\nout the coordinates that we will be at after the move. Let's build a function\r\nthat calculates our position after a move is made:\r\n\r\n```javascript\r\nfunction moveAsCoord(move, head) {\r\n  switch (move) {\r\n    case 'up':\r\n      return {x: head.x, y: head.y+1};\r\n    case 'down':\r\n      return {x: head.x, y: head.y-1};\r\n    case 'left':\r\n      return {x: head.x-1, y: head.y};\r\n    case 'right':\r\n      return {x: head.x+1, y: head.y};\r\n  }\r\n}\r\n```\r\n\r\nNow we can scaffold out the next step of our move. We get the set of moves that\r\nwe can make, loop over them and then find the point that we'll end up at:\r\n\r\n```javascript\r\nfunction move(state) {\r\n  const head = state.you.body[0];\r\n  const moves = ['up', 'down', 'left', 'right'];\r\n\r\n  for (const move of moves) {\r\n    const coord = moveAsCoord(move, head);\r\n    // We now know where this is going to be!\r\n  }\r\n}\r\n```\r\n\r\nOur snake can now find out where its head is doing to end up if it moves in any\r\npotential direction.\r\n\r\n### 3 Check if the potential directions are off of the\xa0board\r\n\r\nThe next step is for us to figure out if a position exceeds the height or width\r\nof the board. Let's create a new \"offBoard\" function that tells us whether\r\nanything is off of the board. This is a function which checks all sides of the\r\nboard to see if the coordinate is below or above the board range:\r\n\r\n```javascript\r\nfunction offBoard(state, coord) {\r\n  if (coord.x < 0) return true;\r\n  if (coord.y < 0) return true;\r\n  if (coord.y >= state.board.height) return true;\r\n  if (coord.x >= state.board.height) return true;\r\n  return false; // If it makes it here we are ok.\r\n}\r\n```\r\n\r\nNow we have all of the pieces. We can calculate the point where our snake will\r\nend up and tell if this point is off the board. Let's wire it all up!\r\n\r\nThis is where I usually compare my logic to the original intent, does it make\r\nsense? Is it readable?\r\n\r\n```javascript\r\nfunction move(state) {\r\n  const head = state.you.body[0];\r\n  const moves = ['up', 'down', 'left', 'right'];\r\n\r\n  for (const move of moves) {\r\n    const coord = moveAsCoord(move, head);\r\n    if (!offBoard(state, coord)) {\r\n      return {move: move};\r\n    }\r\n  }\r\n  return {move: 'up'};\r\n}\r\n```\r\n"}))},function(e){return m.a.createElement(m.a.Fragment,null,m.a.createElement(ue,Object.assign({},e,{title:"Avoiding Yourself"})),m.a.createElement(he,{src:"Did you notice something isn't quite right? Our snake seems to run into itself\r\nsometimes! We've left something out. Since our snake can still move into itself,\r\nin situations where our snake won't survive, it will turn into itself. To fix\r\nthis, we can to include logic to avoid running into our own body.\r\n\r\nLet's make another function that can take a coordinate and compare it to the\r\nsecond element in our snake body to make sure our snake won't move into this\r\nposition.\r\n\r\n```javascript\r\nfunction coordEqual(a, b) {\r\n  return a.x === b.x && a.y === b.y;\r\n}\r\n```\r\n\r\nWe can add this into our main move function to ensure that our snake won't move\r\ninto its own body:\r\n\r\n```javascript\r\nfunction move(state) {\r\n  const head = state.you.body[0];\r\n  const neck = state.you.body[1];\r\n  const moves = ['up', 'down', 'left', 'right'];\r\n\r\n  for (const move of moves) {\r\n    const coord = moveAsCoord(move, head);\r\n    if (!offBoard(state, coord) && !coordEqual(coord, neck)) {\r\n      return {move: move};\r\n    }\r\n  }\r\n  return {move: 'up'};\r\n}\r\n```\r\n\r\nWe've named this part of the snake \"neck\" even though snakes probably don't have\r\nnecks\u2026 Right? Well ours does now! Neck represents the link in our body right\r\nafter the head.\r\n\r\nNow let's deploy our snake again and see how it does!\r\n"}))},function(e){return m.a.createElement(m.a.Fragment,null,m.a.createElement(ue,Object.assign({},e,{title:"Download your Snake!"})),m.a.createElement(he,{src:"Congratulations! You've made it through the tutorials. Now it's time to\r\ndeploy your code. Select your runtime below to download a zip file which\r\nwill get your started battling it out with our snakes in no time.\r\n\r\nOnce you've downloaded your snake you can follow the instructions in the README\r\nto deploy your snake and signup with a Battlesnake account. Thanks for taking\r\nthe tutorial!\r\n"},m.a.createElement("div",{className:"BtnGroup d-flex flex-justify-center p-3"},de.map(function(t){return m.a.createElement("button",{key:t.name,className:"btn BtnGroup-item",onClick:function(){return t(e.code)}},t.title)}))))}],pe=function(){return h.createElement("svg",{height:"50px",style:{color:"white"},fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 503 184"},h.createElement("path",{d:"M305.5 102.7h-36.1v-71H253v71h-36.2v-71h-27L178.2.7h146.5l-.7 31h-18.5zm-33-3h30v-71H321l.6-25h-139l9.3 25h28v71h30v-71h22.6zm226 84.5l-133.3-72.5 34.2-34.8L365.9.3l134-.1V13l-22 15.5L502.5 50h-60.8L459 87.3 439.6 107zm-128.2-73.3l117 63.7-51.8-67.8 19.8-20.1-18.5-39.8h57.4l-21.3-18.7 24-16.8V3.2l-126.3.2L403 77.6zm87-87a7.3 7.3 0 1 1 7.3-7.2 7.3 7.3 0 0 1-7.3 7.2zm0-11.5a4.2 4.2 0 1 0 4.2 4.3 4.2 4.2 0 0 0-4.2-4.3z"}),h.createElement("path",{d:"M134.8 104l-27.2-27.6 32-76.4h34.8l43 102.7h-39.3l-5.3-13.3h-32.5zm45.4-4.4h32.5L172.3 3.1h-30.7l-30.4 72.6 22.4 22.7 4.6-12H175zM167.9 66h-22.5l11.3-30zm-18-3h13.6l-6.8-18.2zm219.6 39.7h-42.3V30.3l.7-29.6h35.3V66h28l4.7 10.7zm-39.3-3h38l24-23.8-3-6.9h-29V3.8h-29.4l-.6 26.6z"}),h.createElement("path",{d:"M3.9 184.2L62.8 107 43.4 87.3 60.7 50H0l24.7-21.5L2.4 13V.2l59.3.1h74.7L103 77l34.2 34.8-1.8 1zm43.2-97.5l19.7 20-51.6 68 117-63.7-32.8-33.3.4-1 32-73.3H5.5v8l24 16.9L8.2 46.9h57.5zm-2-62.8a7.3 7.3 0 1 1 7.2-7.3 7.3 7.3 0 0 1-7.3 7.3zm0-11.5a4.2 4.2 0 1 0 4.1 4.2 4.2 4.2 0 0 0-4.2-4.2zM210.7 118a.2.2 0 0 1-.2 0v-.1a.2.2 0 0 1 .2.2zm4.6-45.5a49.2 49.2 0 0 0 3.5 7.6l1.4 2.6-3.3-9.7a1.1 1.1 0 0 0-1.6-.6z"}),h.createElement("path",{d:"M223.2 94.4a1 1 0 0 0-1.2-.3l-.4-.7c-2.9-3.3-5.7-6.8-8.8-10a1 1 0 0 0-.5.8l-.5 3a2 2 0 0 0 0 .3l-1.7 11a1.1 1.1 0 0 0 .6 1.1 5.5 5.5 0 0 1-.7 1.8l.3 5v3.4a1.2 1.2 0 0 0 0 .4v.5a.7.7 0 0 0-.1.1 1.2 1.2 0 0 0 0 .4c0 .1-.1 0 0 .1v.6c0 .2 0 0 0 0a2 2 0 0 1 0 .6v1.3s-.1 0 0 0a1 1 0 0 1 0 .2v.2a.4.4 0 0 0 0 .3s-.2.1 0 .2-.1 0 0 0l-.2 1.3v1.2h.1c.1 0 0 0 0 .2a.5.5 0 0 1 0 .2.5.5 0 0 1 .2.1v.3c0 .1 0 0 0 0h.4c.2 0 0 0 0 0h.1v1a30 30 0 0 1-1.4 7.2l-.5 1.1a148.2 148.2 0 0 0-6.2-17.1l-.4-2.2c.1-.2.3-.2.5-.2a2.7 2.7 0 0 1-.4-.9 3 3 0 0 1 0-.5 1 1 0 0 0-.1-.4 2.6 2.6 0 0 0-.4-.4v-.3a.2.2 0 0 1 .2 0c.2 0 .3-.1.3-.5a12.4 12.4 0 0 0-.9-2c-.6-4.5-1.2-9-1.6-13.5a1.1 1.1 0 0 0-1.2-1l-.2-.7a1.1 1.1 0 0 0-.4-.5l-.5.4a96 96 0 0 1-11.6 12.7l-2.1 3.4a1.2 1.2 0 0 0-.1.1 1.9 1.9 0 0 1 1.3 1.4 1.1 1.1 0 0 0 .6-.5l.6-.7q-1.1 6-2.4 11.8l-2 9a45.2 45.2 0 0 0-1.5 8.7.4.4 0 0 0 .4.4 391 391 0 0 1-1 4.7.9.9 0 0 0-.4 1 11 11 0 0 0 1.9 3.8l1.4 2.5 2.2 3.4a20.3 20.3 0 0 0 2.4 2.9 7.1 7.1 0 0 0 1 .8 65.3 65.3 0 0 1 3.2 6.1 1.1 1.1 0 0 0 2-.2l4.2-23.4.3.6a.9.9 0 0 1 1.5-.2v-1.4a.8.8 0 0 1 1.7 0v.7a.7.7 0 0 1 .6.4 35 35 0 0 0 3.4 5.2.8.8 0 0 1 1.3.2c.8 1.6 1.9 3 2.7 4.6a.8.8 0 0 1-.1 1 24 24 0 0 1 3.2 3l2.3 1.9a1.3 1.3 0 0 0 1.2.2c1 1.3 1.8 2.6 2.7 4a1.1 1.1 0 0 0 2-.6c.8-6.2 1.7-12.6 1.9-18.9a7.3 7.3 0 0 1 .8-1.3c0-1.3 0-2.8.2-4.5l.5-4.5 1.6-13.3c.5-3.4 1-6.9 1.3-10.4.2-3.1-1.6-5.2-3.5-7.7zM191.7 155l-.8-1.6a1 1 0 0 0 .2-.1 1.5 1.5 0 0 1 1-.4zm.5-2.5a.4.4 0 0 0-.2-.2c-.1 0-.1-.2 0-.4h.3l-.1.5zm4.9-59v-.8l.1-.6.4 1.5a1.2 1.2 0 0 0-.5 0zm1.4 6l-.3-1v-.3c0-.1 0 0 0 0a1 1 0 0 0 .3.6l.2 1zm5.7 19.8l-.9-4.3a403.2 403.2 0 0 1 1.5 4.5.6.6 0 0 0-.6-.2zm1.2 4.4v.8l-.5-2v-1a13.3 13.3 0 0 1 .8 1.7.5.5 0 0 0-.3.5zm1.2 4.4l-.2-.2a.7.7 0 0 0 .2-.3zm-.2-2.5a14 14 0 0 1 .2 1.6 11.9 11.9 0 0 1-.2-1.5zm.3 5l-.3-1.4a3.9 3.9 0 0 0 .5.2.5.5 0 0 0 .7-.4 12 12 0 0 0 0-1.6l.4 1.4a13.1 13.1 0 0 1-1.3 1.8zm4-16.5a6.3 6.3 0 0 0 0 1.3 3 3 0 0 0 0 .7v1.1c0 .2 0 0 0 0v.1a.1.1 0 0 1 0-.1 2.3 2.3 0 0 1 0-.8v-2.1s.1 0 0 0v-.8a.2.2 0 0 0 0-.2v-.4c0-.1.1 0 0-.1v-.1a2 2 0 0 0 0-.2V109.2l.1 1.8.2 3.3h-.3zm7.9 36.6v-1.5a1.4 1.4 0 0 0 .2-.2zm2.8-53.6a.7.7 0 0 0 0-.2V96.6a1.5 1.5 0 0 0 0-.2v-.1c0-.1-.1 0 0-.1v1zm2.8 7.4l-.7 5.4v-4.6a.4.4 0 0 0 0-.1 6.3 6.3 0 0 0 0-2.4 6 6 0 0 1 .4-1.7l-.5-1v-2l.7 1.2c.8 1.5.3 3.5.1 5.2zm166.2-37.2a1 1 0 0 0-1-.7 1 1 0 0 0-.7 1.9 4 4 0 0 1-.4.2 1.1 1.1 0 0 0-.7-.3h-.3a.6.6 0 0 0-.8-.5h-.2a.6.6 0 0 0-.5-.3c-3.3.4-6.4 1.9-9.4 3.2l-2 .8a.7.7 0 0 0-1-.4 8 8 0 0 0-1.1.7.6.6 0 0 0-.6-.1 175 175 0 0 0-14 6.2l-1.5.4-4.9 1.5a23.2 23.2 0 0 0-5 1.7.8.8 0 0 0 0 1.5 107.2 107.2 0 0 1-11 4.1 1 1 0 0 0 .5 1.9l-.6.5a6.8 6.8 0 0 0-1.5 2.5l.4 1a1 1 0 0 0 0 .3c-.3 8.4 0 17 .3 25.4l-.8.2a55.5 55.5 0 0 1-9.1 1.6 52.4 52.4 0 0 1-5.5.2 1.1 1.1 0 0 0-.7-.6l-.5-.2-3.6-2.7a36.7 36.7 0 0 1-3.5-4.5v-.2a11.1 11.1 0 0 1 1-1.2l.8-1.1a4 4 0 0 0 .7-1.3 28.7 28.7 0 0 1 2.6-3.3 130.6 130.6 0 0 0 9.5-11 27 27 0 0 0 2.2-3.2 11.6 11.6 0 0 1 .2-1.8c0-.5.2-1 .3-1.4a4.2 4.2 0 0 0-1-1.7 6 6 0 0 0-1.3-.8l-1.3-.7a4.1 4.1 0 0 1-1.3-1.2 2.7 2.7 0 0 1-1.9-.7c-.5-.4-1-.9-1.7-1.3a18.3 18.3 0 0 0-1.5 1.3 8.6 8.6 0 0 1-1.7 1.2c0 .4.2.6.4.6s.3.2.4.5l-.8-.1a1.5 1.5 0 0 0-1 .2 458 458 0 0 1-8.2 9.7 29 29 0 0 0-3.5 5l-1.5 2-1.7 2.3-1 1.2V103l.2-4.6-.2-7.6a11 11 0 0 0-1.2-5.2l.3-4a1 1 0 0 0-1.6-1 1.1 1.1 0 0 0-1.9-1l-1.9 2.6q-2.1 1.5-4 3.2c-3.4-.5-3.9 2.6-3.9 5.3a1 1 0 0 0 0 1.1v1.5l.1 4.1a6.5 6.5 0 0 1-.7 2.3 53.3 53.3 0 0 1 .2 7.6l-.2 4.7-2-2.2-12.6 4.8-1 .2a3.9 3.9 0 0 0-.8.4 2.7 2.7 0 0 0-.8 0 28.6 28.6 0 0 1-1.9-3.5l-1.7-4-1.1-2.8-1.3-2.8-1-3.2-.2-.3c-.3-3.5-2.5-6.3-4.3-9.3l-.5-1.1-1.3 1.6 1 1.8-1-.2v-.2a.8.8 0 0 0-.4-.6.8.8 0 0 0 0-.1l-1 1.6a2 2 0 0 1-2.7.7l-5.3-2.6a6 6 0 0 0-.9-.3l-5 11-.5.3a18.5 18.5 0 0 0-1 3l-.2.5-1.4 3a1.1 1.1 0 0 0 .3 1.4l-.1.6a27.3 27.3 0 0 1-1 2.7 2.3 2.3 0 0 0 0 .8 2.3 2.3 0 0 0 .3.6l-.7 3-.7 2.8-.3 1.6v.1c0 .1 0 0 0 0v.4c-.2 0 0 .1-.2.2s0 .1 0 .2a1.1 1.1 0 0 1 0 .3v.5c0 .1-.2.1 0 .1 0 .2 0 .4-.2.6v.4c0 .1 0 .1 0 0a2 2 0 0 1 0 .3V124.6c.1.1 0 0 0 0v.5c0 .1-.1 0 0 .1v.8a.6.6 0 0 1-.1.2l-.1.5v.1l-.4 1.6q-1 4.2-1.6 8.8l.2 1.4-.7.9 1 .7a.4.4 0 0 1 0 .2v.1c0 .1-.1 0 0 .1v.4s-.1 0 0 0v.2a.4.4 0 0 0 0 .2v.3a1.2 1.2 0 0 1 0 .1v.2c0 .3 0 .5-.2.6h.1v2.1c0 .1 0 0 0 0v.2c0 .2 0 0 0 0v.5c0 .1 0 0 0 0v1.5a13 13 0 0 0 0 2 .1.1 0 0 1 0 .2h-.1a2.6 2.6 0 0 1 0 .7V148.9h-.1a4.6 4.6 0 0 0 0-1 2 2 0 0 0 0-.5 2.1 2.1 0 0 1 0-.3v-.4a2 2 0 0 1 0-.5v-.7a.5.5 0 0 0 0-.1v-.1.9-.2h-.2v.3a2.9 2.9 0 0 0 0 .7 1.4 1.4 0 0 1 0 .3v2.4a.1.1 0 0 1 0 .2.3.3 0 0 0 0 .1v.1a.1.1 0 0 0 .1.1.2.2 0 0 1 0 .2.1.1 0 0 1 0 .1h.1a1.3 1.3 0 0 0 0 .5h-.9v-.4a.2.2 0 0 0 0-.1v-.1a1.5 1.5 0 0 1 0-.5v-.6.3l.1.2c.1 0 0-.2 0-.2v.4a2.9 2.9 0 0 0 .1.3v.1a.7.7 0 0 1 0 .3 1 1 0 0 1 0 .3v.1l.1-.1c.1-.1 0 0 0 0v-.2a.2.2 0 0 1 0 .2c.1 0 0 .2 0 .2a3.4 3.4 0 0 0 .2.8v.1a.7.7 0 0 1 0 .4h.2c-.1 0 0-.2 0-.2v-.1l.1.1c.1 0 0 0 0 .1a3.4 3.4 0 0 1 0-.5s.2 0 0 0 .1 0 0-.2v-.3a4.5 4.5 0 0 0 .9 1.9 2.9 2.9 0 0 0 3 1.1 51.1 51.1 0 0 0 5.8 5.3c.6.5 2 .3 1.9-.8-.7-5.6.5-11.1 1.5-16.6a50.6 50.6 0 0 0 .9-7.6l.1-2.7a25.8 25.8 0 0 0 2.3 4.6c.7.9 2.3.4 2-.8a.9.9 0 0 0 0-.2 84.8 84.8 0 0 1 8.5-3.5l2.3-.7 1 3 .2.4a1.7 1.7 0 0 1 1.5.5l.1.1a131.4 131.4 0 0 1 3.1 15 .5.5 0 0 0 .9.3c1.3-1.4 1.7-3.5 2.3-5.4l2.2-4.8a9.2 9.2 0 0 0 .6-.7 10.7 10.7 0 0 0 1.6-3l.3-.6.4-.5a.4.4 0 0 0-.1-.6 12.8 12.8 0 0 0 .2-1.3l.1-.4v-.3a19.2 19.2 0 0 0 .5-2.2 1.1 1.1 0 0 0-1.4-1.3l-.8-2.3a5.3 5.3 0 0 1-.5-1l-.3-1c1.1-.8 4.8-.5 5.6-1.5a73 73 0 0 1 6.8-3.5c.1 1.2.2 8.4.4 9.5a6.3 6.3 0 0 1-.5.4c-.2.1-.2.3 0 .7l.3.3.5.6v.2a2.7 2.7 0 0 1-.7.3 1.4 1.4 0 0 0 0 1 8.7 8.7 0 0 0 .6.8 4 4 0 0 1 .3.5l.1 1.1a2.4 2.4 0 0 1-.1.2l.1.1c.3 2.5.7 5 .8 7.5l-.2 1a1.2 1.2 0 0 0 .2.9 24 24 0 0 1-.2 3.4l-.6 1c-.7 1.2 1 2.5 1.8 1.5a1.1 1.1 0 0 0 .7-.6l1.2-2-.7 1.6c-.7 1.3 1.3 2.5 2 1.2l3.6-7.3a3.5 3.5 0 0 0 .5 0 8.8 8.8 0 0 0 2.9-4 49 49 0 0 0 1.5-5l.6-2 3-6a9.8 9.8 0 0 0 2.1 1.5 49.7 49.7 0 0 0 9.7 3 11.7 11.7 0 0 0 1.2.4 2.3 2.3 0 0 0 .6 0l2.3.5a.6.6 0 0 0 .2.2 19 19 0 0 0 3.9.5 20.3 20.3 0 0 0 4.5 0l1.8-.3c1.9 0 4-.3 5.3-.5l.2 3a1.4 1.4 0 0 0-.2.4 4.3 4.3 0 0 0 .8 4.4v.1l-.1 1.3c0 1.5-.3 4.3 1 5.4a1.6 1.6 0 0 0 .1.2c.2 1.3.5 2.8 2 2.9a13.6 13.6 0 0 0 3.4-.8l4.5-1.2 5.7-1.4a57.8 57.8 0 0 0 7.2-1.4c2-.5 4-1.3 5.8-2l7.2-1.9c1.3-.3 1-2.4-.3-2.3a24.2 24.2 0 0 0-4.5 1 20.3 20.3 0 0 0 4-1.7 8.8 8.8 0 0 0 1.6-1 23.4 23.4 0 0 1 .9-5.6l.9-3a2.5 2.5 0 0 0-.6-.8 1.5 1.5 0 0 1-1.3-.2 9.5 9.5 0 0 1-1-1l-1.3-1a3 3 0 0 0-1.3-.9 16.6 16.6 0 0 1-3.8 1.5 9 9 0 0 0-3.5 1.8 25.8 25.8 0 0 0-4.2.6l-3.2.8q-1.5.5-3.3.8a6.3 6.3 0 0 1-2.5-.4v-9.4a6.2 6.2 0 0 0 1.8 0 4.4 4.4 0 0 1 2.2.1 2.3 2.3 0 0 1 1.7-.5 2.8 2.8 0 0 0 1.4-.2l.6-.1a.6.6 0 0 0 .3 0h.6a9.4 9.4 0 0 0 3.4-.8l.3-.2c.4 0 .9-.2 1.3-.4l.2-.1a1.1 1.1 0 0 0 2 .2 1 1 0 0 0 1-1l-.1-2c0-.2.2-.3.3-.4l2.1-2.4a3.9 3.9 0 0 0-.1-1.8 6.8 6.8 0 0 0-.8-1.5 2.1 2.1 0 0 1-1.4-.2c0-1.1 0-2.2.2-3.4a1 1 0 0 0-.3-.8 1.2 1.2 0 0 0-1.9-.1v.3a1 1 0 0 0-.3 0 1.2 1.2 0 0 0-1.2-.4l-2.7.7-4.2.8a30.4 30.4 0 0 1-6.2.8c-.2-.3 1.3-6.5 1.2-7v-.3c3.2-1.4 6.3-3.2 9.4-4.7q6-2.7 12.1-5l9.3-3.4a.8.8 0 0 1 .4-1.1 58.1 58.1 0 0 1 6-2.1c.4-.2 1.2-.6 2-.8l.4-1.4a9.8 9.8 0 0 1-1.2.2 6.3 6.3 0 0 1-1.4.1 1.1 1.1 0 0 1-.8-1.8.8.8 0 0 0 .3.3 1.1 1.1 0 0 0 .4.1h.1c-.2 0 0 0 0 0a.8.8 0 0 0 .5 0h.1a1.7 1.7 0 0 0 .3-.1 1.4 1.4 0 0 0 .7-1.2 1 1 0 0 0-.8-1 1 1 0 0 0-1 .6 1 1 0 0 0-.6 1 9.4 9.4 0 0 1-1.5.3c-1.2 0-1.4-1.4-.6-2a11.6 11.6 0 0 1 2-1 1.2 1.2 0 0 1 0-1.4 11 11 0 0 1-1.4.3 1.4 1.4 0 0 1-1.4-.7h.1a3.3 3.3 0 0 0 1.5.1c1 .5 2.2-.7 2-1.8a2 2 0 0 0-1.6-1.3 3.4 3.4 0 0 0-.5 0 96 96 0 0 1 3.3-1.8.9.9 0 0 0 .5-.2l1.8-1 3.7-1.8.7-.4.6-1.5-4.8 1.9zm-150 89l-1.2-1.3a1 1 0 0 0 1-.8l.1-.5a.6.6 0 0 0 .2 0v2.5zm8.5-22.5l-.5-1 .7.1h1.2a13.8 13.8 0 0 0-1.4 1zm3.5-13.3l-4.4.9a5.3 5.3 0 0 1-.8.2 5 5 0 0 0-1 .2l.6-1.7.7-1.6a39.9 39.9 0 0 1 1.6-4.5 30.8 30.8 0 0 1 2.3-4.4l.2-.9a178 178 0 0 1 5 10.6 40.5 40.5 0 0 1-4.2 1.2zm10 10.3l.3-.1a7.8 7.8 0 0 1 .2 1.3zm4.8 18.1q-.9-5.4-2.1-10.7a36.1 36.1 0 0 1 1.4 4v1.8a.5.5 0 0 0 .7.5l.7 2.5a10.1 10.1 0 0 1-.7 2zm22.6-5.8a.8.8 0 0 0-.2-.1l.2-.8a.8.8 0 0 0 .3-.1l.1.3zm14.7-17.5a1 1 0 0 1 .4.3l.6.4a7 7 0 0 1-1-.7zm34.2 16.5a4.4 4.4 0 0 1-.7-2l.6.6a6.2 6.2 0 0 1 .1 1.2zm13.7 1.9a27.8 27.8 0 0 0 3.2-.7c1.6-.4 3-.8 4.2-1.3a2.7 2.7 0 0 1 1 .1l-9.5 2.5c.3-.3.7-.5 1-.6zm6.7-64.2l-.9.2-.4.2v-.1l1.6-.5zm18-4.8a.1.1 0 0 0-.1 0l-.4.1s0 .1 0 0h-.2a.7.7 0 0 0-.1.2c0-.1-.2 0-.2 0h-.2a.7.7 0 0 0 .2-.2l.3-.1 1.4-.4zm6.1 1.7l.3-.1a.1.1 0 0 1 .1 0l-.2.2h-.1l-.2.1c-.2.1 0 0-.1 0h-.1zm1.6-6.2l-5 2.6-3.7 1.9a1 1 0 0 0 0-.7 84.8 84.8 0 0 0 10.2-4.8 1 1 0 0 0 .1.3l-1.5.7zM377.2 90zm1-.2z"}),h.createElement("path",{d:"M381.9 88.7c.1 0 0-.2 0 0zm10-16.5a.9.9 0 0 0-1.5 0 1.1 1.1 0 0 0-.1.7.9.9 0 0 0 1.8 0 1 1 0 0 0-.2-.7zm-280.7 99.1a5.2 5.2 0 0 0 1.3-1.1c-.8.5-1.7 1-2.5 1.7l1.3-.6z"}),h.createElement("path",{d:"M184.5 76.6l-1 1.4a1 1 0 0 0-1.3-.5l-.4.2a1.1 1.1 0 0 0-.5-1 .8.8 0 0 0-.1-1 .8.8 0 0 0-.4-1 1.6 1.6 0 0 0-1-.3.8.8 0 0 0-.3-.9l2-1.2a1 1 0 0 1 0-.4 3 3 0 0 1 1-1l-3.5 2.4a1.7 1.7 0 0 0-1 .1 1.1 1.1 0 0 0-.8 0 1 1 0 0 0-.7 1l-5 3-.2.1a2 2 0 0 0-.5 0 2 2 0 0 0-1.2 1l-3.3 2.2a26.6 26.6 0 0 0-4.4 3l-1.4.7 1-.8c3.4-2.5 7.1-5 10.3-7.7.6-.6-.2-1.6-1-1.2a94.6 94.6 0 0 0-11 7.4l-10.6 8c-7 5.2-14 10.6-20.4 16.4a1 1 0 0 0-.4.7 17.3 17.3 0 0 0-4.2 3.5v.1c.7 4.8 4.2 8.4 6.4 12.7a110.5 110.5 0 0 1 14.3 3q2.3.6 4.5 1.4a12.5 12.5 0 0 1 4.3 2c2 1.8 1.7 4.7 1 7.2a43.9 43.9 0 0 1-6 5.6l-7.5 3.7-6.4 3.5a2 2 0 0 1 0 .3l-3.5 1.4a68.3 68.3 0 0 0-7.7 3.1.8.8 0 0 0 .3 1.6.8.8 0 0 0 .8 1.1 36.4 36.4 0 0 0 6.5-2.7l.4-.2c-4.9 4.3-10.5 7.7-16 11.3-2.2 1.5-4.5 3-6.7 4.7a.8.8 0 0 1 .2.2 74.2 74.2 0 0 1 11.4-6.5c.9-.4 1.8.7 1 1.3-2 1.9-4.5 3.4-6.3 5.5l.7-.2h.3l.1-.2.4-.1a38.7 38.7 0 0 1 5-2.9 1.3 1.3 0 0 1 1.6.7 2.4 2.4 0 0 0 .2-.2.6.6 0 0 0 .2 0l1.5-.7-1.9 1a.8.8 0 0 1-.3 1l-.3.1a11.7 11.7 0 0 0 1.4-.7l.6-.3c.8-.6 1.6.6 1 1.2 2.7-1.5 5.4-2.9 8.2-4.2a.9.9 0 0 0 0 .6l-.5.3a.5.5 0 0 0 .3 1 62.6 62.6 0 0 0 6.3-2l4.4-2.6.6-.4a9 9 0 0 1 2.3.1.5.5 0 0 0 .7-.5 2.7 2.7 0 0 1 0-.6c-.2.4.4 1 .8.5a9.1 9.1 0 0 1 1.3-1.2 36.4 36.4 0 0 0 6.5-3.5 17.7 17.7 0 0 0 3.2-1.9l1.9-1.4a33.8 33.8 0 0 0 2.8-2l.9-.7a13.9 13.9 0 0 0 2.2-1.7 19 19 0 0 1 2-1.5.5.5 0 0 0 .3-.6l.8-1.4a25.9 25.9 0 0 0 2.8-6.7 21.4 21.4 0 0 0 .6-7.7 10.7 10.7 0 0 0-1.2-4l-1-2.1c-.7-1.1-1.2-2.4-2-3.3a23.8 23.8 0 0 0-5.3-5 33 33 0 0 0-6.7-3.3c-2.3-.9-5.4-1.2-7.3-2.6a1.1 1.1 0 0 1-.3-.4l13.8-9c5.6-3.7 11.5-7.3 17-11.4l3.7-2a2.7 2.7 0 0 0 0-.2 1.9 1.9 0 0 1-1.3-1.6 2 2 0 0 1-.7-1.3.8.8 0 0 0 .3-.1 6.8 6.8 0 0 0 1.4-3.6 1 1 0 0 0 1.5-.3l.1-.8a1 1 0 0 0-1-1l1-2a.9.9 0 0 0-1.6-1zm-36.8 47.9a1.2 1.2 0 0 0-.2.2l-2.8-.8 1.8.3 1.4.2zm-10.2 40.4l1.3-.7a63.7 63.7 0 0 1-1.3.7zm16.3-8.6l-.3.3-.6.2.1-.1zm7.7-27a4 4 0 0 1 .1 3 11.9 11.9 0 0 0-.1-3zm4.6 19.8l-1.3 1-.6.4.4-.5 1.5-1zM147.2 160l-1.1.6h-.3l1.4-.5zm2-15.1a3 3 0 0 1 .4-.2l.3-.2h.3a2.7 2.7 0 0 0 .4-.2h.2a.6.6 0 0 1 .2-.1l-.3.2h-.1c-.2.2-.5.2-.7.3a2.8 2.8 0 0 1-.4.2l-.5.2zm13.5-16.6l-.2.9a6.5 6.5 0 0 0-1.3-1.1zm-4.8-2a9.2 9.2 0 0 1 .7 1.4 9.2 9.2 0 0 0-1-1.1 1.7 1.7 0 0 0 .3-.4zm-.9 11.2l1-1.4-.8 1.2-.2.2zm-1.6-10a13 13 0 0 1 .4 1.4 6.6 6.6 0 0 0-1.5-1.4 8.6 8.6 0 0 0 1-.1zm-2.8-4.3a5 5 0 0 1 .5.4l-1.5-.6zm24-39a1.4 1.4 0 0 1-1.4-.8h.1a1.1 1.1 0 0 0 .3-.6.9.9 0 0 0 0-.3.7.7 0 0 0 .2-.2.9.9 0 0 0 0-1 1 1 0 0 0 .7-.3 1.1 1.1 0 0 0 .2-.4l.5-.2a2.3 2.3 0 0 0-.6 1 .7.7 0 0 0 .7.9 1 1 0 0 0 .1 1 1 1 0 0 0 1.2.2 1.4 1.4 0 0 0 .3-.1l.2-.1.3-.2a1 1 0 0 0 .5.5 18.8 18.8 0 0 1-3.2.5zm4.5-4a2.4 2.4 0 0 1-.1.3v.1a1.1 1.1 0 0 0 0 .2 1 1 0 0 0-.2-.4l.5-.4a.9.9 0 0 0-.2.2zm1.3-.5a1 1 0 0 0-.3.1 1 1 0 0 0-.5 0l1-.5zm4.8-6.8l-.1-.1a1 1 0 0 0-.8-.5 1 1 0 0 0-.7.3 1 1 0 0 0-.3.7 1 1 0 0 0 .5.8v.1a1 1 0 1 0 1.4-1.3z"}))},fe=(n(175),n(177),"/**\r\n * A basic snake implementation for example purposes.\r\n */\r\n\r\nfunction start() {\r\n  return { color: 'green' };\r\n}\r\n\r\nfunction coordEqual(a, b) {\r\n  return a.x === b.x && a.y === b.y\r\n}\r\n\r\nfunction move(state) {\r\n  const head = state.you.body[0];\r\n  const neck = state.you.body[1];\r\n  const moves = ['up', 'down', 'left', 'right'];\r\n\r\n  for (const move of moves) {\r\n    const coord = moveAsCoord(move, head);\r\n    if (!offBoard(state, coord) && !coordEqual(coord, neck)) {\r\n      return {move: move};\r\n    }\r\n  }\r\n  return {move: 'up'};\r\n}\r\n\r\nfunction offBoard(state, coord) {\r\n  if (coord.x < 0) return true;\r\n  if (coord.y < 0) return true;\r\n  if (coord.y >= state.board.height) return true;\r\n  if (coord.x >= state.board.height) return true;\r\n  return false; // If it makes it here we are ok.\r\n}\r\n\r\nfunction moveAsCoord(move, head) {\r\n  switch (move) {\r\n    case 'up':\r\n      return {x: head.x, y: head.y+1};\r\n    case 'down':\r\n      return {x: head.x, y: head.y-1};\r\n    case 'left':\r\n      return {x: head.x-1, y: head.y};\r\n    case 'right':\r\n      return {x: head.x+1, y: head.y};\r\n  }\r\n}\r\n"),ve="// Welcome Battlesnakers!\r\n//\r\n//\r\n//       ---_ ......._-_--.\r\n//       (|\\ /      / /| \\  \\\r\n//       /  /     .'  -=-'   `.\r\n//       /  /    .'             )\r\n//       _/  /   .'        _.)   /\r\n//       / o   o        _.-' /  .'\r\n//       \\          _.-'    / .'*|\r\n//       \\______.-'//    .'.' \\*|\r\n//       \\|  \\ | //   .'.' _ |*|\r\n//       `   \\|//  .'.'_ _ _|*|\r\n//       .  .// .'.' | _ _ \\*|\r\n//       \\`-|\\_/ /    \\ _ _ \\*\\\r\n//        `/'\\__/      \\ _ _ \\*\\\r\n//       /^|            \\ _ _ \\*\r\n//       '  `             \\ _ _ \\\r\n//                        \\_\r\n//\r\n",ge=function(e){function t(){var e,n,r;Object(i.a)(this,t);for(var s=arguments.length,d=new Array(s),h=0;h<s;h++)d[h]=arguments[h];return(n=Object(c.a)(this,(e=Object(l.a)(t)).call.apply(e,[this].concat(d)))).initial=localStorage.getItem("code")||ve,n.editor=void 0,n.state={tutorial:parseInt(localStorage.getItem("step")||"0"),code:n.initial,frame:ne},n.componentDidMount=function(){setTimeout(n.handleStart,1e3)},n.cancelled=function(){return!!n.state.cancelled},n.handleInit=function(){n.editor&&n.editor.onDidChangeModelContent(function(){n.handleCodeChange(n.editor.getValue())})},n.handleSetTutorial=function(e){var t=n.state.tutorial+e;n.setState({tutorial:t}),localStorage.setItem("step",t.toString())},n.handleNext=function(){return n.handleSetTutorial(1)},n.handlePrev=function(){return n.handleSetTutorial(-1)},n.handleCodeChange=function(e){localStorage.setItem("code",e),n.setState({code:e})},n.handleReset=function(){n.setState({cancelled:!0,running:!1,frame:ne})},n.handleStop=function(){n.setState({cancelled:!0,running:!1})},n.handleStart=function(){n.state.running||(n.setState({running:!0}),n.run())},n.run=(r=Object(o.a)(a.a.mark(function e(){var t,r;return a.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n.setState({cancelled:!1}),e.prev=1,t=n.state.code===ve?fe:n.state.code,r=new Function("".concat(t,";\n return { move: move, start: start }"))(),e.next=6,Q(r,Object(u.a)(Object(u.a)(n)),function(e){n.setState({frame:e,error:void 0})});case 6:n.setState({running:!1}),e.next=13;break;case 9:e.prev=9,e.t0=e.catch(1),console.log(e.t0),n.setState({error:e.t0,running:!1});case 13:case"end":return e.stop()}},e,this,[[1,9]])})),function(){return setTimeout(r,0)}),n}return Object(d.a)(t,e),Object(s.a)(t,[{key:"render",value:function(){var e=this,t=this.state,n=t.tutorial,r=t.error,a=t.code,o=t.running,i=t.frame,s=me[n];return m.a.createElement(m.a.Fragment,null,m.a.createElement("header",{className:"Header bg-gray-dark"},m.a.createElement("div",{className:"Header-item"},m.a.createElement("a",{href:"https://battlesnake.com",target:"_blank"},m.a.createElement(pe,null))),m.a.createElement("div",{className:"Header-item Header-item--full f3 text-mono"},"Learn to Battlesnake!"),m.a.createElement("div",{className:"Header-item"},m.a.createElement("a",{target:"_blank",href:"https://github.com/Nettogrof/battlesnake-learn"},"Contribute on GitHub"))),m.a.createElement("main",{className:"height-page d-flex flex-content-stretch"},m.a.createElement("div",{className:"flex-1 bg-gray-light height-page d-flex flex-column"},m.a.createElement(s,{code:a,next:n<me.length-1?this.handleNext:void 0,prev:n>0?this.handlePrev:void 0})),m.a.createElement("div",{className:"flex-1 bg-vs-dark height-page overflow-hidden"},m.a.createElement(g.a,{height:"100%",value:this.initial,editorDidMount:function(t,n){e.editor=n,e.handleInit()},language:"javascript",theme:"dark",options:{minimap:{enabled:!1},scrollbar:{vertical:"hidden",verticalScrollbarSize:0}}})),m.a.createElement("div",{className:"flex-1 bg-vs-dark height-page border-left"},m.a.createElement("div",{className:"p-2 height-page"},m.a.createElement("div",{className:"text-center text-red",style:{height:"25px"}},r&&r.message),m.a.createElement(P,{food:i.food,columns:i.game.width,rows:i.game.height,snakes:[i.snake]}),m.a.createElement("div",{className:"BtnGroup d-flex flex-justify-center mt-3"},!o&&m.a.createElement("button",{className:"btn BtnGroup-item",onClick:this.handleStart},"Play"),o&&m.a.createElement("button",{className:"btn BtnGroup-item",onClick:this.handleStop},"Pause"),m.a.createElement("button",{className:"btn BtnGroup-item",onClick:this.handleReset},"Reset"))))))}}]),t}(m.a.Component);f.a.render(m.a.createElement(ge,null),document.getElementById("root"))},47:function(e,t,n){e.exports=n(179)}},[[47,2,1]]]);
//# sourceMappingURL=main.d5e29695.chunk.js.map